<?xml version="1.0"?>
<project name="Memeograph" default="build" basedir=".">

    <!--OS specific stuff for jogl-->
    <condition property="osfamily" value="windows"> <os family="windows" /> </condition>
    <condition property="osfamily" value="linux"> <os family="unix" /> </condition>
    <condition property="osfamily" value="mac"> <os family="mac" /> </condition>
    <property name="osfamily" value="unknown" />

    <!--Also architecture specific for JOGL -->
    <condition property="arch" value="ppc"> <and> <os family="mac"/> <contains string="${os.arch}" substring="ppc"/> </and> </condition>
    <condition property="arch" value="universal" ><os family="mac"/></condition>
    <condition property="arch" value="64"> <contains string="${os.arch}" substring="64" /> </condition>
    <property name="arch" value="32" />

    <property name="nativelibrarypath" value="lib/jogl/${osfamily}${arch}" />
    <echo message="Expecting native libs in: ${nativelibrarypath}" />

    <available file="${nativelibrarypath}" type="dir" property="hasnativelibs"  value="true" />
    <property name="hasnativelibs" value="false" />
    <property name="memeographer_args" value="+useopengl=${hasnativelibs} +jdigrapher.savefile=graph.object" />

    <!-- the port# that Memeograph will connect to -->
    <property name="port" value="8000" />

    <!-- the port # that the SuT program will listen for a connection from -->
    <property name="SuTport" value="${port}" />

    <!-- the type of transport that we are using -->
    <property name="transport" value="dt_socket" />

    <!-- Holds a list of all of the 'main' project's dependencies  that should go on the class path-->
    <path id="lib.path">
            <fileset dir=".">
                <include name="lib/*.jar" />
            </fileset>
            <fileset dir=".">
                <include name="lib/jogl/*.jar" />
            </fileset>
    </path>

    <!-- Define all of our run targets here -->
    <target name="run-example-BST" depends="build" description="Runs the BST program">
        <java fork="true" classname="BSTExample" >
            <jvmarg value="-Xdebug" />
            <jvmarg value="-Xrunjdwp:transport=${transport},address=${SuTport},server=y,suspend=n"/>
            <classpath>
                <path location="bin/examples/java"/>
            </classpath>
        </java>
    </target>

    <target name="run-stepline" description="Runs memeographer by stepping line by line through main.">
        <antcall target="run">
            <param name="memeographer.args" value="+generator=memeograph.generator.jdi.StepLineJDI" />
        </antcall>
    </target>

    <target name="run-fromgraph" description="Loads a graph from file: graph.object. And then shows off the graph. This can be run after the run target is run to make execution faster assuming that you don't need to generate a new object graph.">
        <antcall target="run">
            <param name="memeographer.args" value="+fileloader.file=graph.object +grapher=memeograph.builder.filebuilder.GraphFileLoader ${args}" />
        </antcall>
    </target>


    <target name="run-dot" description="Runs BSTExample and then generates dot output. If you use linux, have dot installed and have gnome-open installed then it will also generate the graph and display it to you. ">
        <antcall target="run">
            <param name="memeographer.args" value="+displayer=memeograph.renderer.dot.DOTRenderer" />
        </antcall>
    </target>

    <target name="run" depends="build" description="Runs memeographer on BSTExample creating a graph on every insert ">
        <property name="target.main" value="BSTExample" />
        <property name="target.args" value="" />
        <property name="target.classpath" value="bin/examples/java" />
        <property name="target.sourcepath" value="src/examples/java" />
        <property name="memeographer.args" value="" />
        <java fork="true" classname="memeograph.Memeographer">
            <sysproperty key="java.library.path" path="${nativelibrarypath}" />
            <arg value="${memeographer_args} ${memeographer.args} +sourcepath=${target.sourcepath} -cp ${target.classpath} ${target.main} ${target.args}" />
            <classpath>
                <path location="bin/main" />
                <path refid="lib.path" />
            </classpath>
        </java>
    </target>

    <!-- Define all of our build targets here -->
    <target name="build" depends="-compile-main,-compile-examples,-compile-test"  description ="Builds the project, the tests and the examples."/>

    <target name="-compile-main">
        <mkdir dir="bin/main" />
        <javac srcdir="src/main" destdir="bin/main" classpathref="lib.path" debug="on" source="6" includeAntRuntime="false">
            <compilerarg value="-Xlint:unchecked" />
        </javac>
        <copy todir="bin/main">
            <fileset dir="src/main" includes="**/*.properties" />
        </copy>
    </target>

    <target name="-compile-examples">
        <mkdir dir="bin/examples" />
        <mkdir dir="bin/examples/java" />
        <javac debug="true" debuglevel="lines,vars,source" srcdir="src/examples/java" destdir="bin/examples/java"  includeAntRuntime="false"/>
    </target>

  <target name="-compile-test" depends="-compile-main">
    <mkdir dir="bin/test" />
    <javac srcdir="src/test" destdir="bin/test" debug="true" source="6" includeAntRuntime="false">
      <classpath>
        <path refid="lib.path" />
        <path location="bin/main" />
        <path location="bin/test" />
      </classpath>
    </javac>
  </target>

  <!-- Basic simple clean target -->
  <target name="clean" description="Deletes the bin directory">
          <delete dir="bin"/>
  </target>

  <!-- Test target -->
  <target name="test" description="Run the unit tests on the code" depends="build">
    <junit>
      <classpath>
        <path refid="lib.path" />
        <path location="bin/main" />
        <path location="bin/test" />
      </classpath>
      <formatter type="brief" usefile="false" />
      <batchtest>
        <fileset dir="bin/test" includes="**/*Test.class" />
      </batchtest>
    </junit>
  </target>

</project>
